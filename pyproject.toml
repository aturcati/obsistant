[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "obsistant"
version = "0.1.0"
description = "CLI tool to extract #tags from markdown content and add them to YAML frontmatter in Obsidian vaults."
authors = [{name = "Andrea Turcati"}]
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
keywords = ["obsidian", "markdown", "tags", "frontmatter", "yaml"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Text Processing :: Markup",
    "Topic :: Utilities",
]

# Core dependencies - minimal and focused
dependencies = [
    "click>=8.1.0",
    "mdformat>=0.7.22",
    "pyyaml>=6.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "black>=24.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "types-PyYAML>=6.0.0",
    "pre-commit>=3.0.0",
]

[project.scripts]
obsistant = "obsistant.cli:cli"

[project.urls]
Repository = "https://github.com/aturcati/obsistant"
Issues = "https://github.com/aturcati/obsistant/issues"
Changelog = "https://github.com/aturcati/obsistant/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["."]
include = ["obsistant*"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
]
ignore = [
    "E501",  # Line too long (handled by black)
    "B008",  # Do not perform function calls in argument defaults
    "B905",  # zip() without an explicit strict= parameter
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["N801", "N802", "N803", "N806"]  # Allow non-standard naming in tests

[tool.ruff.lint.isort]
known-first-party = ["obsistant"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "obsistant.cli"
disallow_untyped_decorators = false

# Pytest configuration
[tool.pytest.ini_options]
addopts = "-v --tb=short"
testpaths = ["tests"]
minversion = "8.0"
xfail_strict = true

# Coverage configuration
[tool.coverage.run]
source = ["obsistant"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_covered = true
